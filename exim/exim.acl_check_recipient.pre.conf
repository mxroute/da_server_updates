# You don't look like Costco to me
deny    !authenticated = *
        senders = !:
        condition = ${if match{${lc:$sender_address_local_part}}{\Ncostco\N}{yes}{no}}
        message = Sender address not accepted
        logwrite = Blocked sender local part containing "costco": $sender_address from $sender_host_address

# Nice spammer you have there DreamHost
deny    condition = ${if match{$sender_address_domain}{\Ndreamhostps\.com\N}{yes}{no}}
        message = Go away
        logwrite = Blocked dreamhostps domain: $sender_address_domain from $sender_host_address

# Fuck off .solutions spammers
deny    !authenticated = *
        condition = ${if match{$sender_helo_name}{\N\.solutions$\N}{yes}{no}}
        message = This message represents a spam trend that matches no non-spam senders
        logwrite = Blocked HELO .solutions: $sender_helo_name from $sender_host_address

# Block recipients containing "iggymaria03"
deny    message = RECIPIENT_BLOCKED: Recipients containing "iggymaria03" are not allowed
        condition = ${if match{$local_part}{\Niggymaria03\N}{yes}{no}}
        logwrite = Blocked recipient with iggymaria03: $local_part@$domain from $sender_host_address

# Block domains containing "accesowebmail"
deny    condition = ${if match{$sender_address_domain}{\Naccesowebmail\N}{yes}{no}}
        message = Go away
        logwrite = Blocked accesowebmail domain: $sender_address_domain from $sender_host_address

# Block documento*.sbs domains
deny    condition = ${if match{$sender_address_domain}{\N^documento.*\.sbs$\N}{yes}{no}}
        message = Go away
        logwrite = Blocked documento*.sbs domain: $sender_address_domain from $sender_host_address

# DDOS Mitigation
deny    condition = ${if >{$rcpt_fail_count}{25}{yes}{no}}
        log_message = "Too many failed RCPT commands from ${sender_host_address}"
        message = "Too many RCPT failures - try later"
        delay = 60s

# Back to your normal programming

# First: Critical security checks and spoofing prevention
# Check domain whitelist
warn    condition = ${lookup{${domain:$sender_address}}lsearch{/etc/susranges_domainwhitelist}{1}{0}}
        set acl_m_domain_whitelisted = 1

# Apply the suspicious range check
deny    !authenticated = *
        !hosts = <; /etc/susranges_whitelist
        !condition = ${if eq{$acl_m_domain_whitelisted}{1}{1}{0}}
        hosts = <; /etc/susranges
        condition = ${lookup{$domain}lsearch{/etc/susranges_protected_domains}{1}{0}}
        logwrite = Rejected suspicious IP: $sender_host_address for protected domain: $domain
        message = Unauthenticated mail not allowed from this range to protected domain

deny    senders     = *@paypal.com
        condition   = ${if or{\
                          {match{$sender_helo_name}{\N.*outbound\.protection\.outlook\.com\N}}\
                          {match{$sender_host_name}{\N.*outbound\.protection\.outlook\.com\N}}\
                         }{yes}{no}}
        message     = Suspected PayPal spoofing attempt blocked
        logwrite    = Blocked spoofed PayPal: sender=$sender_address helo=$sender_helo_name host=$sender_host_name from $sender_host_address

deny    message = HELO matches local domain ($sender_helo_name) but sender is not authenticated
        !authenticated = *
        condition = ${if match_domain{$sender_helo_name}{+local_domains}{yes}{no}}
        domains = !+local_domains
        logwrite = HELO_SPOOF: $sender_helo_name from IP $sender_host_address rejected

# Second: Basic relay and authentication checks
deny    message = Relay not permitted
        !authenticated = *
        domains = !+local_domains

# Third: SPF and other protocol-level checks
deny    spf = fail
        !authenticated = *
        message = SPF check failed. $sender_host_address is not authorized to send mail from \
                  ${if def:sender_address_domain \
                       {$sender_address_domain}{$sender_helo_name}}

# Fourth: Pattern-based blocking
deny    message = Blocking non-whitelisted messages from Google Groups
        !authenticated = *
        condition = ${if match{$sender_address}{\N\+bnc\N}{yes}{no}}
        !condition = ${if exists{/etc/googlegroups_whitelist}\
                       {${lookup{${domain:$sender_address}}lsearch{/etc/googlegroups_whitelist}{yes}{no}}}\
                       {no}}
        logwrite = Blocked Google Groups sender: $sender_address

deny    message = Suspicious message pattern rejected
        condition = ${if match{$sender_address}{\N^as[0-9]\+bnc.*@.*\.info$\N}{yes}{no}}
        logwrite = Blocked suspicious sender pattern: $sender_address

deny    !authenticated = *
        condition = ${if or{\
                          {match{${lc:$sender_helo_name}}{googleusercontent}}\
                          {match{${lc:$sender_host_name}}{googleusercontent}}\
                         }}
        message = Google Cloud has conditional access to our SMTP
        logwrite = Googleusercontent attempt - HELO: $sender_helo_name Hostname: $sender_host_name Host: $sender_host_address

# Fifth: Domain-specific rules

deny    !authenticated = *
        condition = ${if match{$sender_address_domain}{\N^ahalab\N}{yes}{no}}
        message = Go fuck yourself spammer
        logwrite = Blocked ahalab domain: sender=$sender_address from $sender_host_address

deny    message = Mail not accepted from default assigned hostnames
        !authenticated = *
        condition = ${if or{\
                      {match{$sender_helo_name}{\N^vps-.*\.vps\.ovh\.(ca|us|net)$\N}}\
                      {match{$sender_host_name}{\N^vps-.*\.vps\.ovh\.(ca|us|net)$\N}}\
                    }{yes}{no}}
        logwrite = Rejected default OVH hostname: helo=$sender_helo_name host=$sender_host_name from $sender_host_address

deny    !authenticated = *
        !hosts = <; /etc/aclwhitelist
        hosts = <; /etc/ovhranges
        condition = ${if match{$sender_helo_name}{\N^mail[0-9]+\.[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)?$\N}{yes}{no}}
        message = Suspicious email trend detected and blocked.
        logwrite = Rejected suspicious OVH host: $sender_host_address with HELO $sender_helo_name

# Sixth: Authentication-related spoofing checks
deny    message = Spoofing domains that you do not own to external recipients not allowed
        authenticated = *
        condition = ${lookup{$sender_address_domain}lsearch{/etc/bannedspoofing}{1}{0}}
        domains = !+local_domains
        !condition = ${if exists{/etc/spoofwhitelist}\
                     {${lookup{${domain:$authenticated_id}}lsearch{/etc/spoofwhitelist}{yes}{no}}}\
                     {no}}
        logwrite = SPOOFCHECK: Blocked spoof attempt sender=$sender_address auth=$authenticated_id rcpt=$local_part@$domain

# Seventh: Miscellaneous blocks
deny    senders     = *@example.com
        message     = Your software claims your sending address is on example.com which is not your domain

deny    senders     = nwildlsearch*@;/etc/spam_senders
        message     = Your sending address has been blocked by admins see mxroutedocs.com for explanation

deny    recipients  = nwildlsearch*@;/etc/spam_recipients
        message     = Your recipient address has been blocked by admins see mxroutedocs.com for explanation

deny    recipients  = nwildlsearch*@;/etc/overquota
        message     = Your recipient has reached their disk quota

deny    condition = ${if match{$sender_helo_name}{(?:^|\.)\mxrouting.net}}
        condition = ${if and {{!eq{$sender_host_address}{::1}} {!eq{$sender_host_address}{127.0.0.1}}}}
        message   = Intentionally vague error message requiring you to contact support

deny    domains = ^example\.com
        message = Sending to domains starting with "example.com" is not allowed.

deny    sender_domains = *cloudwaysapps.com
        message = Please use a real sending domain

# Eighth: Warning and logging
warn    authenticated = *
        logwrite = SPOOFCHECK: Processing authenticated=$authenticated_id sender=$sender_address recipient=$local_part@$domain

warn    senders = :
        set acl_m0 = 1
        logwrite = BLANKLOG: Blank sender detected, deferring decision

# Ninth: Final specific denials
deny    condition = ${if match{$local_part@$domain}{.*@email\.tst.*}{yes}{no}}
        message = Sending to email.tst domains is not allowed

deny    !sender_domains = nwildlsearch;/etc/onmicrosoft_whitelist
        condition = ${if match{$sender_address}{\N.*onmicrosoft\.com\N}{yes}{no}}
        message = Envelope sender containing onmicrosoft.com is not allowed
        logwrite = Blocked onmicrosoft sender: $sender_address from $sender_host_address ($sender_address_domain)

deny    !authenticated = *
        sender_domains = sendgrid.net
        !condition = ${lookup{$domain}lsearch{/etc/sendgrid_whitelist}{1}{0}}
        message = Sendgrid.net sender domains are only allowed to specific whitelisted recipients
